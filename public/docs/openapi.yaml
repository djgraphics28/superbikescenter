openapi: 3.0.3
info:
  title: SuperBikesCenter
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://superbikescentral.online'
paths:
  /api/provinces:
    get:
      summary: "Get all provinces\n\nThis endpoint retrieves all provinces."
      operationId: getAllProvincesThisEndpointRetrievesAllProvinces
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  provinces:
                    -
                      id: 1
                      name: 'Province 1'
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                    -
                      id: 2
                      name: 'Province 2'
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                properties:
                  provinces:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Province 1'
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                      -
                        id: 2
                        name: 'Province 2'
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Province 1'
                        created_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                        updated_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
      tags:
        - Addresses
      security: []
  '/api/cities/{provinceId}':
    get:
      summary: "Get cities by province ID\n\nThis endpoint retrieves all cities belonging to a specific province."
      operationId: getCitiesByProvinceIDThisEndpointRetrievesAllCitiesBelongingToASpecificProvince
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  cities:
                    -
                      id: 1
                      province_id: 1
                      name: 'City 1'
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                    -
                      id: 2
                      province_id: 1
                      name: 'City 2'
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                properties:
                  cities:
                    type: array
                    example:
                      -
                        id: 1
                        province_id: 1
                        name: 'City 1'
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                      -
                        id: 2
                        province_id: 1
                        name: 'City 2'
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        province_id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'City 1'
                        created_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                        updated_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Province not found.'
                properties:
                  error:
                    type: string
                    example: 'Province not found.'
      tags:
        - Addresses
      security: []
    parameters:
      -
        in: path
        name: provinceId
        description: 'The ID of the province.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/barangays/{cityId}':
    get:
      summary: "Get barangays by city ID\n\nThis endpoint retrieves all barangays belonging to a specific city."
      operationId: getBarangaysByCityIDThisEndpointRetrievesAllBarangaysBelongingToASpecificCity
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  barangays:
                    -
                      id: 1
                      city_id: 1
                      name: 'Barangay 1'
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                    -
                      id: 2
                      city_id: 1
                      name: 'Barangay 2'
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                properties:
                  barangays:
                    type: array
                    example:
                      -
                        id: 1
                        city_id: 1
                        name: 'Barangay 1'
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                      -
                        id: 2
                        city_id: 1
                        name: 'Barangay 2'
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        city_id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Barangay 1'
                        created_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                        updated_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'City not found.'
                properties:
                  error:
                    type: string
                    example: 'City not found.'
      tags:
        - Addresses
      security: []
    parameters:
      -
        in: path
        name: cityId
        description: 'The ID of the city.'
        example: 1
        required: true
        schema:
          type: integer
  /api/application:
    post:
      summary: "Submit a new application\n\nThis endpoint allows a user to submit a new application."
      operationId: submitANewApplicationThisEndpointAllowsAUserToSubmitANewApplication
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Loan Application submitted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Loan Application submitted successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'You already have an active loan application.'
                properties:
                  error:
                    type: string
                    example: 'You already have an active loan application.'
      tags:
        - Applications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: integer
                  description: 'The ID of the customer.'
                  example: 1
                product:
                  type: integer
                  description: 'The ID of the product.'
                  example: 2
                source_of_income:
                  type: string
                  description: 'The source of income.'
                  example: Employment
                name_of_business:
                  type: string
                  description: 'The name of the business (if any).'
                  example: 'My Business'
                company_name:
                  type: string
                  description: 'The name of the company (if any).'
                  example: 'My Company'
                work_position:
                  type: string
                  description: 'The position at work (if any).'
                  example: Manager
                years_in_work:
                  type: integer
                  description: 'The number of years in work (if any).'
                  example: 5
                comaker_name:
                  type: string
                  description: 'The name of the comaker (if any).'
                  example: 'John Doe'
                comaker_work:
                  type: string
                  description: 'The work of the comaker (if any).'
                  example: Engineer
                comaker_monthly_income:
                  type: number
                  description: 'The monthly income of the comaker (if any).'
                  example: 50000.0
                months_to_pay:
                  type: integer
                  description: 'The number of months to pay.'
                  example: 12
                monthly_payment_amount:
                  type: number
                  description: 'The amount to be paid monthly.'
                  example: 1000.0
                monthly_income:
                  type: number
                  description: 'The monthly income.'
                  example: 2000.0
                downpayment:
                  type: number
                  description: 'The downpayment amount.'
                  example: 500.0
                loan_amount:
                  type: number
                  description: 'The loan amount.'
                  example: 10000.0
                name:
                  type: string
                  description: 'The name of the applicant.'
                  example: 'Jane Doe'
                email:
                  type: string
                  description: 'The email of the applicant.'
                  example: jane@example.com
              required:
                - customer_id
                - product
                - source_of_income
                - months_to_pay
                - monthly_payment_amount
                - monthly_income
                - downpayment
                - loan_amount
                - name
                - email
      security: []
  '/api/application/{id}':
    get:
      summary: "Get applications by customer ID\n\nThis endpoint retrieves all applications for a specific customer."
      operationId: getApplicationsByCustomerIDThisEndpointRetrievesAllApplicationsForASpecificCustomer
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  applications:
                    -
                      id: 1
                      customer_id: 1
                      product_id: 2
                      source_of_income: Employment
                      name_of_business: 'My Business'
                      company_name: 'My Company'
                      work_position: Manager
                      years_in_work: 5
                      comaker_name: 'John Doe'
                      comaker_work: Engineer
                      comaker_monthly_income: 50000
                      months_to_pay: 12
                      monthly_payment_amount: 1000
                      monthly_income: 2000
                      downpayment: 500
                      loan_amount: 10000
                      date_applied: '2024-07-26T00:00:00.000000Z'
                      date_inquired: '2024-07-26T00:00:00.000000Z'
                      status: for-review
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                properties:
                  applications:
                    type: array
                    example:
                      -
                        id: 1
                        customer_id: 1
                        product_id: 2
                        source_of_income: Employment
                        name_of_business: 'My Business'
                        company_name: 'My Company'
                        work_position: Manager
                        years_in_work: 5
                        comaker_name: 'John Doe'
                        comaker_work: Engineer
                        comaker_monthly_income: 50000
                        months_to_pay: 12
                        monthly_payment_amount: 1000
                        monthly_income: 2000
                        downpayment: 500
                        loan_amount: 10000
                        date_applied: '2024-07-26T00:00:00.000000Z'
                        date_inquired: '2024-07-26T00:00:00.000000Z'
                        status: for-review
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        customer_id:
                          type: integer
                          example: 1
                        product_id:
                          type: integer
                          example: 2
                        source_of_income:
                          type: string
                          example: Employment
                        name_of_business:
                          type: string
                          example: 'My Business'
                        company_name:
                          type: string
                          example: 'My Company'
                        work_position:
                          type: string
                          example: Manager
                        years_in_work:
                          type: integer
                          example: 5
                        comaker_name:
                          type: string
                          example: 'John Doe'
                        comaker_work:
                          type: string
                          example: Engineer
                        comaker_monthly_income:
                          type: integer
                          example: 50000
                        months_to_pay:
                          type: integer
                          example: 12
                        monthly_payment_amount:
                          type: integer
                          example: 1000
                        monthly_income:
                          type: integer
                          example: 2000
                        downpayment:
                          type: integer
                          example: 500
                        loan_amount:
                          type: integer
                          example: 10000
                        date_applied:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                        date_inquired:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                        status:
                          type: string
                          example: for-review
                        created_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                        updated_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'No applications found.'
                properties:
                  error:
                    type: string
                    example: 'No applications found.'
      tags:
        - Applications
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the application.'
        example: 17
        required: true
        schema:
          type: integer
      -
        in: path
        name: customer_id
        description: 'The ID of the customer.'
        example: 1
        required: true
        schema:
          type: integer
  /api/customer/login:
    post:
      summary: "Login a user\n\nThis endpoint allows a user to log in using their email and password."
      operationId: loginAUserThisEndpointAllowsAUserToLogInUsingTheirEmailAndPassword
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful'
                  token: 'Bearer your_access_token_here'
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  token:
                    type: string
                    example: 'Bearer your_access_token_here'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid credentials'
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: user@example.com
                password:
                  type: string
                  description: 'The password of the user.'
                  example: password123
              required:
                - email
                - password
      security: []
  /api/customer/register:
    post:
      summary: "Register a new user\n\nThis endpoint registers a new user and their customer details."
      operationId: registerANewUserThisEndpointRegistersANewUserAndTheirCustomerDetails
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully registered!'
                  customer:
                    id: 1
                    user_id: 1
                    first_name: John
                    middle_name: M
                    last_name: Doe
                    sufix_name: Jr
                    contact_number: '09171234567'
                    birth_date: '1990-01-01'
                    gender: Male
                    marital_status: Single
                    province_id: 1
                    city_id: 1
                    barangay_id: 1
                    address1: '123 Main St'
                    address2: 'Apt 4B'
                    created_at: '2024-07-26T00:00:00.000000Z'
                    updated_at: '2024-07-26T00:00:00.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Successfully registered!'
                  customer:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 1
                      first_name:
                        type: string
                        example: John
                      middle_name:
                        type: string
                        example: M
                      last_name:
                        type: string
                        example: Doe
                      sufix_name:
                        type: string
                        example: Jr
                      contact_number:
                        type: string
                        example: '09171234567'
                      birth_date:
                        type: string
                        example: '1990-01-01'
                      gender:
                        type: string
                        example: Male
                      marital_status:
                        type: string
                        example: Single
                      province_id:
                        type: integer
                        example: 1
                      city_id:
                        type: integer
                        example: 1
                      barangay_id:
                        type: integer
                        example: 1
                      address1:
                        type: string
                        example: '123 Main St'
                      address2:
                        type: string
                        example: 'Apt 4B'
                      created_at:
                        type: string
                        example: '2024-07-26T00:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2024-07-26T00:00:00.000000Z'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    email:
                      - 'The email has already been taken.'
                    password:
                      - 'The password confirmation does not match.'
                properties:
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email has already been taken.'
                        items:
                          type: string
                      password:
                        type: array
                        example:
                          - 'The password confirmation does not match.'
                        items:
                          type: string
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'The first name of the user.'
                  example: John
                middle_name:
                  type: string
                  description: 'The middle name of the user.'
                  example: M
                last_name:
                  type: string
                  description: 'The last name of the user.'
                  example: Doe
                sufix_name:
                  type: string
                  description: 'The suffix of the user.'
                  example: Jr
                email:
                  type: string
                  description: 'The email of the user.'
                  example: user@example.com
                password:
                  type: string
                  description: 'The password of the user.'
                  example: password123
                contact_number:
                  type: string
                  description: 'The contact number of the user.'
                  example: '09171234567'
                birth_date:
                  type: date
                  description: 'The birth date of the user.'
                  example: '1990-01-01'
                gender:
                  type: string
                  description: 'The gender of the user.'
                  example: Male
                marital_status:
                  type: string
                  description: 'The marital status of the user.'
                  example: Single
                province_id:
                  type: integer
                  description: 'The ID of the province.'
                  example: 1
                city_id:
                  type: integer
                  description: 'The ID of the city.'
                  example: 1
                barangay_id:
                  type: integer
                  description: 'The ID of the barangay.'
                  example: 1
                address1:
                  type: string
                  description: 'The first address line.'
                  example: '123 Main St'
                address2:
                  type: string
                  description: 'The second address line.'
                  example: 'Apt 4B'
                password_confirmation:
                  type: string
                  description: 'The confirmation of the password.'
                  example: password123
              required:
                - first_name
                - last_name
                - email
                - password
                - contact_number
                - birth_date
                - gender
                - marital_status
                - province_id
                - city_id
                - barangay_id
                - address1
                - password_confirmation
      security: []
  /api/profile:
    get:
      summary: "Get customer profile by user ID\n\nThis endpoint retrieves a customer's profile based on their user ID."
      operationId: getCustomerProfileByUserIDThisEndpointRetrievesACustomersProfileBasedOnTheirUserID
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"customer\": {\n    \"id\": 1,\n    \"user_id\": 1,\n    \"first_name\": \"John\",\n    \"middle_name\": \"M\",\n    \"last_name\": \"Doe\",\n    \"sufix_name\": \"Jr\",\n    \"contact_number\": \"1234567890\",\n    \"birth_date\": \"1990-01-01\",\n    \"gender\": \"Male\",\n    \"marital_status\": \"Single\",\n    \"is_active\": true,\n    \"province_id\": 1,\n    \"city_id\": 1,\n    \"barangay_id\": 1,\n    \"address1\": \"123 Main St\",\n    \"address2\": \"Apt 4B\",\n  }\n}"
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Customer not found.'
                properties:
                  error:
                    type: string
                    example: 'Customer not found.'
      tags:
        - Customers
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  /api/email/verify:
    get:
      summary: "Show the email verification notice\n\nThis endpoint shows the email verification notice."
      operationId: showTheEmailVerificationNoticeThisEndpointShowsTheEmailVerificationNotice
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Please verify your email address.'
                properties:
                  message:
                    type: string
                    example: 'Please verify your email address.'
      tags:
        - 'Email Verification'
  '/api/email/verify/{id}/{hash}':
    get:
      summary: "Verify email address\n\nThis endpoint verifies the user's email address."
      operationId: verifyEmailAddressThisEndpointVerifiesTheUsersEmailAddress
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email verified successfully.'
                properties:
                  message:
                    type: string
                    example: 'Email verified successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid or expired verification link.'
                properties:
                  message:
                    type: string
                    example: 'Invalid or expired verification link.'
      tags:
        - 'Email Verification'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: '1'
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: 'The email verification hash.'
        example: abc123
        required: true
        schema:
          type: string
  /api/email/verification-notification:
    post:
      summary: "Resend email verification notification\n\nThis endpoint resends the email verification notification."
      operationId: resendEmailVerificationNotificationThisEndpointResendsTheEmailVerificationNotification
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Verification link sent!'
                properties:
                  message:
                    type: string
                    example: 'Verification link sent!'
        429:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many requests. Please try again later.'
                properties:
                  message:
                    type: string
                    example: 'Too many requests. Please try again later.'
      tags:
        - 'Email Verification'
  /api/address/regions:
    get:
      summary: ''
      operationId: getApiAddressRegions
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/address/provinces:
    get:
      summary: ''
      operationId: getApiAddressProvinces
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  '/api/address/provinces/{regionId}':
    get:
      summary: ''
      operationId: getApiAddressProvincesRegionId
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: regionId
        description: ''
        example: mollitia
        required: true
        schema:
          type: string
  '/api/address/cities/{provinceId}':
    get:
      summary: ''
      operationId: getApiAddressCitiesProvinceId
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: provinceId
        description: ''
        example: quae
        required: true
        schema:
          type: string
  '/api/address/cities/{regionId}/{provinceId}':
    get:
      summary: ''
      operationId: getApiAddressCitiesRegionIdProvinceId
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: regionId
        description: ''
        example: quibusdam
        required: true
        schema:
          type: string
      -
        in: path
        name: provinceId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/address/barangays/{cityId}':
    get:
      summary: ''
      operationId: getApiAddressBarangaysCityId
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: cityId
        description: ''
        example: tempore
        required: true
        schema:
          type: string
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  /api/inquiries:
    post:
      summary: "Store a newly created Inquiry resource in storage.\n\nThis endpoint allows you to submit an inquiry about a product."
      operationId: storeANewlyCreatedInquiryResourceInStorageThisEndpointAllowsYouToSubmitAnInquiryAboutAProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Inquiry submitted successfully and response email sent.'
                properties:
                  message:
                    type: string
                    example: 'Inquiry submitted successfully and response email sent.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product Not Found!'
                properties:
                  message:
                    type: string
                    example: 'Product Not Found!'
      tags:
        - Inquiries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  description: 'The ID of the product.'
                  example: 1
                name:
                  type: string
                  description: 'The name of the person making the inquiry.'
                  example: 'John Doe'
                email:
                  type: string
                  description: 'The email address of the person making the inquiry.'
                  example: john@example.com
                message:
                  type: string
                  description: 'The message content of the inquiry.'
                  example: 'I am interested in this product.'
                contact_number:
                  type: string
                  description: 'optional The contact number of the person making the inquiry.'
                  example: 123-456-7890
                province_id:
                  type: string
                  description: 'optional The province ID related to the inquiry.'
                  example: '1'
                city_id:
                  type: string
                  description: 'optional The city ID related to the inquiry.'
                  example: '1'
                barangay:
                  type: string
                  description: 'optional The barangay related to the inquiry.'
                  example: 'Barangay 1'
              required:
                - product_id
                - name
                - email
                - message
      security: []
  '/api/get-monthly-dues/{applicationId}':
    get:
      summary: 'Get monthly dues for a specific application.'
      operationId: getMonthlyDuesForASpecificApplication
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  monthlyDues:
                    -
                      id: 1
                      application_id: 1
                      due_date: '2024-08-01'
                      amount_due: 5000
                      amount_paid: 1000
                      status: unpaid
                    -
                      id: 2
                      application_id: 1
                      due_date: '2024-09-01'
                      amount_due: 5000
                      amount_paid: 0
                      status: unpaid
                properties:
                  monthlyDues:
                    type: array
                    example:
                      -
                        id: 1
                        application_id: 1
                        due_date: '2024-08-01'
                        amount_due: 5000
                        amount_paid: 1000
                        status: unpaid
                      -
                        id: 2
                        application_id: 1
                        due_date: '2024-09-01'
                        amount_due: 5000
                        amount_paid: 0
                        status: unpaid
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        application_id:
                          type: integer
                          example: 1
                        due_date:
                          type: string
                          example: '2024-08-01'
                        amount_due:
                          type: integer
                          example: 5000
                        amount_paid:
                          type: integer
                          example: 1000
                        status:
                          type: string
                          example: unpaid
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Not yet Approved, no monthly dues found.'
                properties:
                  error:
                    type: string
                    example: 'Not yet Approved, no monthly dues found.'
      tags:
        - 'Monthly Dues'
      security: []
    parameters:
      -
        in: path
        name: applicationId
        description: ''
        example: est
        required: true
        schema:
          type: string
  '/api/get-payment-histories/{userId}':
    get:
      summary: 'Get payment histories for a specific user.'
      operationId: getPaymentHistoriesForASpecificUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  paymentHistories:
                    -
                      id: 1
                      user_id: 1
                      monthly_due_id: 1
                      amount_paid: 1000
                      payment_method: credit_card
                      payment_gateway: PayPal
                      transaction_id: TXN123456789
                      created_at: '2024-08-01T12:34:56.000000Z'
                      updated_at: '2024-08-01T12:34:56.000000Z'
                    -
                      id: 2
                      user_id: 1
                      monthly_due_id: 2
                      amount_paid: 1500
                      payment_method: bank_transfer
                      payment_gateway: Stripe
                      transaction_id: TXN987654321
                      created_at: '2024-08-05T14:23:45.000000Z'
                      updated_at: '2024-08-05T14:23:45.000000Z'
                properties:
                  paymentHistories:
                    type: array
                    example:
                      -
                        id: 1
                        user_id: 1
                        monthly_due_id: 1
                        amount_paid: 1000
                        payment_method: credit_card
                        payment_gateway: PayPal
                        transaction_id: TXN123456789
                        created_at: '2024-08-01T12:34:56.000000Z'
                        updated_at: '2024-08-01T12:34:56.000000Z'
                      -
                        id: 2
                        user_id: 1
                        monthly_due_id: 2
                        amount_paid: 1500
                        payment_method: bank_transfer
                        payment_gateway: Stripe
                        transaction_id: TXN987654321
                        created_at: '2024-08-05T14:23:45.000000Z'
                        updated_at: '2024-08-05T14:23:45.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        monthly_due_id:
                          type: integer
                          example: 1
                        amount_paid:
                          type: integer
                          example: 1000
                        payment_method:
                          type: string
                          example: credit_card
                        payment_gateway:
                          type: string
                          example: PayPal
                        transaction_id:
                          type: string
                          example: TXN123456789
                        created_at:
                          type: string
                          example: '2024-08-01T12:34:56.000000Z'
                        updated_at:
                          type: string
                          example: '2024-08-01T12:34:56.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'No payment histories found for this user.'
                properties:
                  error:
                    type: string
                    example: 'No payment histories found for this user.'
      tags:
        - 'Payment Histories'
      security: []
    parameters:
      -
        in: path
        name: userId
        description: ''
        example: est
        required: true
        schema:
          type: string
  '/api/pay-monthly-due/{monthlyDueId}':
    post:
      summary: 'Pay the monthly due.'
      operationId: payTheMonthlyDue
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Payment successful'
                  monthly_due:
                    id: 1
                    user_id: 1
                    amount_due: 5000
                    amount_paid: 1000
                    status: paid
                    receipt_number: REC123456789
                    payment_method: credit_card
                properties:
                  message:
                    type: string
                    example: 'Payment successful'
                  monthly_due:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 1
                      amount_due:
                        type: integer
                        example: 5000
                      amount_paid:
                        type: integer
                        example: 1000
                      status:
                        type: string
                        example: paid
                      receipt_number:
                        type: string
                        example: REC123456789
                      payment_method:
                        type: string
                        example: credit_card
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'monthly due not found.'
                properties:
                  error:
                    type: string
                    example: 'monthly due not found.'
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount_paid:
                  type: number
                  description: 'The amount paid by the user.'
                  example: 1000.0
                receipt_number:
                  type: string
                  description: 'The receipt number of the payment.'
                  example: REC123456789
                payment_method:
                  type: string
                  description: 'The method of payment (e.g., credit card, bank transfer).'
                  example: credit_card
                payment_gateway:
                  type: string
                  description: 'The payment gateway used for the transaction.'
                  example: PayPal
                transaction_id:
                  type: string
                  description: 'The transaction ID from the payment gateway.'
                  example: TXN123456789
              required:
                - amount_paid
                - receipt_number
                - payment_method
      security: []
    parameters:
      -
        in: path
        name: monthlyDueId
        description: ''
        example: voluptatem
        required: true
        schema:
          type: string
  /api/products:
    get:
      summary: "Display a listing of the Product resource.\n\nThis endpoint allows you to filter products by various criteria and paginate the results."
      operationId: displayAListingOfTheProductResourceThisEndpointAllowsYouToFilterProductsByVariousCriteriaAndPaginateTheResults
      description: ''
      parameters:
        -
          in: query
          name: name
          description: 'Search name.'
          example: Laptop
          required: false
          schema:
            type: string
            description: 'Search name.'
            example: Laptop
        -
          in: query
          name: brand
          description: 'The brand ID of the product.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'The brand ID of the product.'
            example: 1
        -
          in: query
          name: category
          description: 'The category ID of the product.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'The category ID of the product.'
            example: 1
        -
          in: query
          name: min_price
          description: 'The minimum price of the product.'
          example: '15000'
          required: false
          schema:
            type: string
            description: 'The minimum price of the product.'
            example: '15000'
        -
          in: query
          name: max_price
          description: 'The maximum price of the product.'
          example: '300000'
          required: false
          schema:
            type: string
            description: 'The maximum price of the product.'
            example: '300000'
        -
          in: query
          name: per_page
          description: 'The number of items per page.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'The number of items per page.'
            example: 10
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'Product Name'
                      slug: product-name
                      price: 10000
                      category_id: 1
                      brand_id: 1
                      created_at: '2024-07-26T00:00:00.000000Z'
                      updated_at: '2024-07-26T00:00:00.000000Z'
                  links:
                    first: 'http://example.com/api/products?page=1'
                    last: 'http://example.com/api/products?page=1'
                    prev: null
                    next: null
                  meta:
                    current_page: 1
                    from: 1
                    last_page: 1
                    path: 'http://example.com/api/products'
                    per_page: 10
                    to: 1
                    total: 1
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Product Name'
                        slug: product-name
                        price: 10000
                        category_id: 1
                        brand_id: 1
                        created_at: '2024-07-26T00:00:00.000000Z'
                        updated_at: '2024-07-26T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Product Name'
                        slug:
                          type: string
                          example: product-name
                        price:
                          type: integer
                          example: 10000
                        category_id:
                          type: integer
                          example: 1
                        brand_id:
                          type: integer
                          example: 1
                        created_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                        updated_at:
                          type: string
                          example: '2024-07-26T00:00:00.000000Z'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'http://example.com/api/products?page=1'
                      last:
                        type: string
                        example: 'http://example.com/api/products?page=1'
                      prev:
                        type: string
                        example: null
                      next:
                        type: string
                        example: null
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      path:
                        type: string
                        example: 'http://example.com/api/products'
                      per_page:
                        type: integer
                        example: 10
                      to:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1
      tags:
        - Products
      security: []
  '/api/product/{slug}':
    get:
      summary: "Display the specified product.\n\nThis endpoint retrieves a specific product by its slug."
      operationId: displayTheSpecifiedProductThisEndpointRetrievesASpecificProductByItsSlug
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: 'Product Name'
                    slug: product-name
                    price: 10000
                    category_id: 1
                    brand_id: 1
                    variations: []
                    created_at: '2024-07-26T00:00:00.000000Z'
                    updated_at: '2024-07-26T00:00:00.000000Z'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Product Name'
                      slug:
                        type: string
                        example: product-name
                      price:
                        type: integer
                        example: 10000
                      category_id:
                        type: integer
                        example: 1
                      brand_id:
                        type: integer
                        example: 1
                      variations:
                        type: array
                        example: []
                      created_at:
                        type: string
                        example: '2024-07-26T00:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2024-07-26T00:00:00.000000Z'
      tags:
        - Products
      security: []
    parameters:
      -
        in: path
        name: slug
        description: 'The slug of the product.'
        example: product-name
        required: true
        schema:
          type: string
  /api/categories:
    get:
      summary: "Display a listing of the Categories resource.\n\nThis endpoint retrieves a list of all categories."
      operationId: displayAListingOfTheCategoriesResourceThisEndpointRetrievesAListOfAllCategories
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'Category Name'
                      image: 'http://example.com/storage/category-image.jpg'
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Category Name'
                        image: 'http://example.com/storage/category-image.jpg'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Category Name'
                        image:
                          type: string
                          example: 'http://example.com/storage/category-image.jpg'
      tags:
        - Products
      security: []
  /api/brands:
    get:
      summary: "Display a listing of the Brand resource.\n\nThis endpoint retrieves a list of all brands."
      operationId: displayAListingOfTheBrandResourceThisEndpointRetrievesAListOfAllBrands
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'Brand Name'
                      image: 'http://example.com/storage/brand-image.jpg'
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Brand Name'
                        image: 'http://example.com/storage/brand-image.jpg'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Brand Name'
                        image:
                          type: string
                          example: 'http://example.com/storage/brand-image.jpg'
      tags:
        - Products
      security: []
  /api/change-password:
    post:
      summary: "Change Password\n\nThis endpoint allows a user to change their password."
      operationId: changePasswordThisEndpointAllowsAUserToChangeTheirPassword
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password changed successfully.'
                properties:
                  message:
                    type: string
                    example: 'Password changed successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Current password is incorrect.'
                properties:
                  error:
                    type: string
                    example: 'Current password is incorrect.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'The new password confirmation does not match.'
                properties:
                  error:
                    type: string
                    example: 'The new password confirmation does not match.'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: 'The current password of the user.'
                  example: old_password
                new_password:
                  type: string
                  description: 'The new password for the user.'
                  example: new_password123
                new_password_confirmation:
                  type: string
                  description: 'The confirmation of the new password.'
                  example: new_password123
              required:
                - current_password
                - new_password
                - new_password_confirmation
      security: []
tags:
  -
    name: Addresses
    description: ''
  -
    name: Applications
    description: ''
  -
    name: Authentication
    description: ''
  -
    name: Customers
    description: ''
  -
    name: 'Email Verification'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: Inquiries
    description: ''
  -
    name: 'Monthly Dues'
    description: ''
  -
    name: 'Payment Histories'
    description: ''
  -
    name: Payments
    description: ''
  -
    name: Products
    description: ''
  -
    name: Users
    description: ''
